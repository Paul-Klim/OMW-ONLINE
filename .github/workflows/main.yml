name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        arch: [arm, arm64]
    runs-on: ubuntu-22.04
    env:
      CMAKE_VERSION: 3.18.4

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Update Gradle Wrapper
      run: |
        rm -f gradle/wrapper/gradle-wrapper.properties gradle/wrapper/gradle-wrapper.jar
        mkdir -p gradle/wrapper
        echo "distributionBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
        echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-7.6-bin.zip" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        wget https://raw.githubusercontent.com/gradle/gradle/master/gradle/wrapper/gradle-wrapper.jar -O gradle/wrapper/gradle-wrapper.jar
        chmod +x gradlew

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y --fix-missing build-essential gcc-multilib python3 unzip pkg-config p7zip-full
        cd /home/runner/
        wget https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz
        tar xvf cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz

    - name: Setup storage chooser
      run: |
        git clone https://github.com/codekidX/storage-chooser.git storagechooser
        cd storagechooser
        git checkout master
        cd ..

    - name: Build native libraries
      run: |
        export PATH=/home/runner/cmake-$CMAKE_VERSION-Linux-x86_64/bin/:$PATH
        cd buildscripts
        ./build.sh --arch ${{ matrix.arch }}

    - name: Update Gradle Configuration
      run: |
        echo "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8" >> gradle.properties
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        echo "kotlin.code.style=official" >> gradle.properties
        
        # Обновляем build.gradle
        cat << EOF >> build.gradle
        buildscript {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:7.0.4'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url "https://jitpack.io" }
            }
        }
        EOF
        
        # Обновляем settings.gradle
        cat << EOF > settings.gradle
        include ':app'
        include ':storagechooser'
        project(':storagechooser').projectDir = new File(settingsDir, 'storagechooser')
        EOF

    - name: Build the APK
      run: |
        ARCH=${{ matrix.arch }}
        source buildscripts/include/version.sh
        sed -i "s/abiFilters.*/abiFilters '$ABI'/" app/build.gradle
        export ANDROID_NDK_HOME=$(pwd)/buildscripts/toolchain/ndk/
        ./gradlew clean
        ./gradlew assembleNightlyDebug --stacktrace --info

    - name: Collect outputs
      id: getfilename
      run: |
        mv app/build/outputs/apk/nightly/debug/omw_debug_*.apk omw-debug-$(git rev-parse --short "$GITHUB_SHA")-${{ matrix.arch }}.apk
        echo "apk_file=$(ls omw-debug-*.apk | sed 's/\(.*\)\..*/\1/')" >> $GITHUB_OUTPUT

    - name: Upload the APK
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.getfilename.outputs.apk_file }}
        path: ${{ steps.getfilename.outputs.apk_file }}.apk
